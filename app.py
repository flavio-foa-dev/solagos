import pandas as pd
import streamlit as st
import time
from datetime import datetime
import openpyxl as op
import pytz

import validation
import filters
import images
import dashBoard


from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle
import tempfile



# msg de sauda√ß√£o
saudacao = "Meu camarada da cidade de Londres Flavio Andrade"
print(saudacao)
print(saudacao)


st.set_page_config(
    page_title="So Lagos Impressoras",
    page_icon="icone.png",
    layout="wide",
    initial_sidebar_state="expanded"  # Pode ser "auto", "expanded" ou "collapsed"
)

# Remover o nome de deploy
st.markdown(
    """
        <style>
            .st-emotion-cache-1wbqy5l {display: none;}
            .stToolbarActionButton {display: none;}

            ._profilePreview_gzau3_63 {display: none;}
            ._profileContainer_gzau3_53 {display: none;}

            .css-18e3th9 {
                visibility: hidden;
                display: none;
            }
            .css-1f1i60u {
                visibility: hidden;
            }
            .css-1gg49ve {
                display: none;
            }
            .css-1y0t01g {
                display: none;
            }
        </style>
    """,
    unsafe_allow_html=True
)

validation.validateUser()

caminho_rede = "https://github.com/flavio-foa-dev/excel/raw/main/data_printer.xlsx"
#caminho_rede = "/home/flavio/Documentos/2024/sologas/solagos/data_printer.xlsx"

data = pd.read_excel(caminho_rede, sheet_name='PRINTERS_INVENTORY')
stock = pd.read_excel(caminho_rede, sheet_name='estoque')

TODOS = data[['MODELO', 'TIPO','NUMERO DE SERIE', 'LOCALIZA√á√ÉO', 'SETOR', 'EMPRESA', 'ATUALIZADO', 'PRINTWAY']]
TODOSS = data[['MODELO','TIPO', 'NUMERO DE SERIE', 'LOCALIZA√á√ÉO', 'SETOR', 'EMPRESA', 'ATUALIZADO', 'PRINTWAY', 'OBSERVA√á√ÉO']]

# selected
indiceSelect = TODOS['LOCALIZA√á√ÉO'].drop_duplicates().sort_values()

with st.sidebar:
    with st.spinner("Loading..."):
        time.sleep(2)
    st.success("So Lagos Impressora üñ®Ô∏è")

filteredToLocation = add_selectbox = st.sidebar.selectbox(
    "BUSCA POR LOCAL üîéüîΩ ",
    (indiceSelect)
)

location = TODOS.loc[TODOS['LOCALIZA√á√ÉO'] == filteredToLocation]
location['ATUALIZADO'] = location['ATUALIZADO'].dt.strftime('%d/%m/%Y')

st.header("Impressora por :blue[Localiza√ß√£o üñ®Ô∏è]")
#locationN = location.drop(['TIPO', 'EMPRESA'], axis=1)
df = st.dataframe(location, hide_index=True)

#Tabela  de  impressoras filtradas sideBar
total = len(location['NUMERO DE SERIE'])
st.sidebar.title(total)

coutPrint = location['MODELO'].value_counts().reset_index(name='QUANT.')
coutEmpresa = location['EMPRESA'].value_counts().reset_index(name='QUANT.')
coutType= location['TIPO'].value_counts().reset_index(name='QUANT.')


df_concat = pd.concat([coutEmpresa, coutType]).fillna('')

with st.sidebar:
    st.dataframe(coutPrint, hide_index=True)
    st.dataframe(coutEmpresa, hide_index=True)
    st.dataframe(coutType, hide_index=True)

    #st.dataframe(df_concat, hide_index=True)


# Obtendo o ano atual
current_year = datetime.now().year

# Adicionando a mensagem de copyright com o ano atual
st.sidebar.markdown(
    f"""
    ---
    &copy; {current_year} Desenvolvido üöÄ Flavio Andrade.
    """
)

filters.filterByModel(TODOS)

filters.filterByAll(TODOSS)

filters.listAllprint(TODOS, TODOSS)

images.show_imagens()

images.show_video()

st.dataframe(stock.fillna(""), hide_index=True)

df = pd.DataFrame(indiceSelect)
# T√≠tulo da aplica√ß√£o
st.title('CARD BY LOCATION')

# Dividir a tela em 3 colunas
col1, col2, col3 = st.columns(3)

# Criar cards para cada linha e distribuir em 3 colunas
for i in range(0, len(df), 3):  # Itera em blocos de 3 linhas

    with col1:
        if i < len(df):
            row = df.iloc[i]

            loca = TODOS.loc[TODOS['LOCALIZA√á√ÉO'] == row['LOCALIZA√á√ÉO']]
            total = len(loca['NUMERO DE SERIE'])

            st.markdown(f"""
                <div style="
                    border: 2px solid #f2a73d;
                    border-radius: 15px;
                    padding: 20px;
                    margin-bottom: 20px;
                    background-color: #2c3e50;
                    box-sizing: border-box;
                    word-wrap: break-word;
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
                    transition: transform 0.3s ease;">
                    <h3 style="color: #ecf0f1; text-align: center; margin: 0 0 10px 0; font-size: 1.5em;">{row['LOCALIZA√á√ÉO']}</h3>
                    <p style="color: #ecf0f1; text-align: center; font-size: 1.2em;"><strong>Total:</strong> {total}</p>
                </div>
            """, unsafe_allow_html=True)

    with col2:
        if i + 1 < len(df):
            row = df.iloc[i + 1]

            loca = TODOS.loc[TODOS['LOCALIZA√á√ÉO'] == row['LOCALIZA√á√ÉO']]
            total = len(loca['NUMERO DE SERIE'])

            st.markdown(f"""
                <div style="
                    border: 2px solid #f2a73d;
                    border-radius: 15px;
                    padding: 20px;
                    margin-bottom: 20px;
                    background-color: #2c3e50;
                    box-sizing: border-box;
                    word-wrap: break-word;
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
                    transition: transform 0.3s ease;">
                    <h3 style="color: #ecf0f1; text-align: center; margin: 0 0 10px 0; font-size: 1.5em;">{row['LOCALIZA√á√ÉO']}</h3>
                    <p style="color: #ecf0f1; text-align: center; font-size: 1.2em;"><strong>Total:</strong> {total}</p>
                </div>
            """, unsafe_allow_html=True)

    with col3:
        if i + 2 < len(df):
            row = df.iloc[i + 2]

            loca = TODOS.loc[TODOS['LOCALIZA√á√ÉO'] == row['LOCALIZA√á√ÉO']]
            total = len(loca['NUMERO DE SERIE'])

            st.markdown(f"""
                <div style="
                    border: 2px solid #f2a73d;
                    border-radius: 15px;
                    padding: 20px;
                    margin-bottom: 20px;
                    background-color: #2c3e50;
                    box-sizing: border-box;
                    word-wrap: break-word;
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
                    transition: transform 0.3s ease;">
                    <h3 style="color: #ecf0f1; text-align: center; margin: 0 0 10px 0; font-size: 1.5em;">{row['LOCALIZA√á√ÉO']}</h3>
                    <p style="color: #ecf0f1; text-align: center; font-size: 1.2em;"><strong>Total:</strong> {total}</p>
                </div>
            """, unsafe_allow_html=True)


dashBoard.dashBoardSelect()


# Fun√ß√£o para gerar o PDF
def gerar_os_pdf(dados, filename):
    c = canvas.Canvas(filename, pagesize=A4)
    width, height = A4

    # Data autom√°tica
    fuso_horario = pytz.timezone("America/Sao_Paulo")  # Ajuste para o fuso hor√°rio que voc√™ precisa
    # Data e hora no fuso hor√°rio correto
    data_atual = datetime.now(fuso_horario).strftime("%d/%m/%Y")
    print(data_atual)

    # T√≠tulo centralizado
    c.setFont("Helvetica-Bold", 16)
    c.drawCentredString(width / 2, height - 50, "ORDEM DE SERVI√áO")

    # Data
    c.setFont("Helvetica", 12)
    c.drawString(450, height - 50, f"Data: {data_atual}")

    # Informa√ß√µes do Cliente
    c.setFont("Helvetica", 12)
    c.drawString(50, height - 90, f"Cliente: {dados['cliente']}")
    c.drawString(50, height - 110, f"Endere√ßo: {dados['endereco']}")
    c.drawString(50, height - 130, f"Contato: {dados['contato']}")

    # Tabela de Servi√ßos
    dados_tabela = [["Quantidade", "Descri√ß√£o do Servi√ßo"]]
    for servico in dados["servicos"]:
        dados_tabela.append([servico["quantidade"], servico["descricao"]])

    tabela = Table(dados_tabela, colWidths=[80, 400])
    tabela.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTNAME', (0, 0), (-1, -1), "Helvetica"),
        ('FONTSIZE', (0, 0), (-1, -1), 12)
    ]))

    tabela.wrapOn(c, width, height)
    tabela.drawOn(c, 50, height - 250)

    # Rodap√© com caixas de assinatura e servi√ßos prestados
    c.setStrokeColor(colors.black)
    c.rect(50, 50, 240, 100, stroke=1, fill=0)
    c.rect(310, 50, 240, 100, stroke=1, fill=0)

    c.setFont("Helvetica-Bold", 12)
    c.drawString(60, 130, "Servi√ßo Prestado:")
    c.drawString(320, 130, "Servi√ßo Prestado:")

    c.setFont("Helvetica", 10)
    y_position = 110
    for servico in dados["servicos"]:
        if y_position >= 80:
            c.drawString(60, y_position, f"{servico['quantidade']}x {servico['descricao']}")
            c.drawString(320, y_position, f"{servico['quantidade']}x {servico['descricao']}")
            y_position -= 15

    # Linhas para assinatura
    c.line(60, 65, 250, 65)  # Linha para assinatura do cliente
    c.line(320, 65, 510, 65)  # Linha para assinatura do t√©cnico

    c.setFont("Helvetica", 12)
    c.drawString(60, 55, "Assinatura do Cliente:")
    c.drawString(320, 55, "Assinatura do T√©cnico:")

    c.save()

# Fun√ß√£o principal que gera a interface e processa o formul√°rio
def gerar_ordem_servico():
    # T√≠tulo da aplica√ß√£o
    st.title("Gerador de Ordem de Servi√ßo")

    # Usar o formul√°rio para controlar quando o conte√∫do √© submetido
    with st.form(key="ordem_servico_form"):
        # Recuperando dados do session_state (caso existam)
        cliente = st.text_input("Nome do Cliente", value=st.session_state.get("cliente", ""))
        endereco = st.text_input("Endere√ßo", value=st.session_state.get("endereco", ""))
        contato = st.text_input("Contato", value=st.session_state.get("contato", ""))

        st.subheader("Servi√ßos Prestados")
        servicos = st.session_state.get("servicos", [])

        # Definir o n√∫mero de servi√ßos
        # Garante que o n√∫mero de servi√ßos ser√° no m√≠nimo 1
        num_servicos = st.number_input("N√∫mero de Servi√ßos", min_value=1, step=1, value=max(len(servicos), 1))

        # Preencher ou ajustar a lista de servi√ßos
        servicos.clear()  # Limpa a lista de servi√ßos, caso a quantidade de servi√ßos seja alterada
        for i in range(num_servicos):
            descricao = st.text_input(f"Descri√ß√£o {i+1}", value=servicos[i]["descricao"] if i < len(servicos) else "", key=f"desc{i}")
            quantidade = st.number_input(f"Quantidade {i+1}", min_value=1, step=1, value=servicos[i]["quantidade"] if i < len(servicos) else 1, key=f"qtd{i}")

            # Atualizando a lista de servi√ßos
            if i < len(servicos):
                servicos[i] = {"descricao": descricao, "quantidade": quantidade}
            else:
                servicos.append({"descricao": descricao, "quantidade": quantidade})

        # Submeter o formul√°rio
        submit_button = st.form_submit_button(label="Salvar Dados")

        # Atualiza o session_state com os dados preenchidos
        if submit_button:
            st.session_state["cliente"] = cliente
            st.session_state["endereco"] = endereco
            st.session_state["contato"] = contato
            st.session_state["servicos"] = servicos
            st.success("Dados salvos com sucesso!")

    # Gerar PDF quando o bot√£o for pressionado
    if st.button("Gerar PDF"):
        dados = {
            "cliente": st.session_state.get("cliente", ""),
            "endereco": st.session_state.get("endereco", ""),
            "contato": st.session_state.get("contato", ""),
            "servicos": st.session_state.get("servicos", [])
        }
        # Gerar o PDF em um arquivo tempor√°rio
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmpfile:
            gerar_os_pdf(dados, tmpfile.name)
            st.success("PDF gerado com sucesso!")
            with open(tmpfile.name, "rb") as file:
                st.download_button("Baixar PDF", file, "ordem_de_servico.pdf", "application/pdf")

# Executar a fun√ß√£o principal
if __name__ == "__main__":
    gerar_ordem_servico()





# Remover o nome de deploy
st.markdown(
    """
        <style>
            .st-emotion-cache-1wbqy5l {display: none;}
        </style>
    """,
    unsafe_allow_html=True
)
